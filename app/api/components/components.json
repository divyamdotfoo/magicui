[
  {
    "files": [
      {
        "name": "animated-beam.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\nimport { RefObject, useEffect, useId, useState } from \"react\";\n\nexport interface AnimatedBeamProps {\n  className?: string;\n  containerRef: RefObject<HTMLElement>; // Container ref\n  fromRef: RefObject<HTMLElement>;\n  toRef: RefObject<HTMLElement>;\n  curvature?: number;\n  reverse?: boolean;\n  pathColor?: string;\n  pathWidth?: number;\n  pathOpacity?: number;\n  gradientStartColor?: string;\n  gradientStopColor?: string;\n  delay?: number;\n  duration?: number;\n  startXOffset?: number;\n  startYOffset?: number;\n  endXOffset?: number;\n  endYOffset?: number;\n}\n\nexport const AnimatedBeam: React.FC<AnimatedBeamProps> = ({\n  className,\n  containerRef,\n  fromRef,\n  toRef,\n  curvature = 0,\n  reverse = false, // Include the reverse prop\n  duration = Math.random() * 3 + 4,\n  delay = 0,\n  pathColor = \"gray\",\n  pathWidth = 2,\n  pathOpacity = 0.2,\n  gradientStartColor = \"#ffaa40\",\n  gradientStopColor = \"#9c40ff\",\n  startXOffset = 0,\n  startYOffset = 0,\n  endXOffset = 0,\n  endYOffset = 0,\n}) => {\n  const id = useId();\n  const [pathD, setPathD] = useState(\"\");\n  const [svgDimensions, setSvgDimensions] = useState({ width: 0, height: 0 });\n\n  // Calculate the gradient coordinates based on the reverse prop\n  const gradientCoordinates = reverse\n    ? {\n        x1: [\"90%\", \"-10%\"],\n        x2: [\"100%\", \"0%\"],\n        y1: [\"0%\", \"0%\"],\n        y2: [\"0%\", \"0%\"],\n      }\n    : {\n        x1: [\"10%\", \"110%\"],\n        x2: [\"0%\", \"100%\"],\n        y1: [\"0%\", \"0%\"],\n        y2: [\"0%\", \"0%\"],\n      };\n\n  useEffect(() => {\n    const updatePath = () => {\n      if (containerRef.current && fromRef.current && toRef.current) {\n        const containerRect = containerRef.current.getBoundingClientRect();\n        const rectA = fromRef.current.getBoundingClientRect();\n        const rectB = toRef.current.getBoundingClientRect();\n\n        const svgWidth = containerRect.width;\n        const svgHeight = containerRect.height;\n        setSvgDimensions({ width: svgWidth, height: svgHeight });\n\n        const startX =\n          rectA.left - containerRect.left + rectA.width / 2 + startXOffset;\n        const startY =\n          rectA.top - containerRect.top + rectA.height / 2 + startYOffset;\n        const endX =\n          rectB.left - containerRect.left + rectB.width / 2 + endXOffset;\n        const endY =\n          rectB.top - containerRect.top + rectB.height / 2 + endYOffset;\n\n        const controlY = startY - curvature;\n        const d = `M ${startX},${startY} Q ${\n          (startX + endX) / 2\n        },${controlY} ${endX},${endY}`;\n        setPathD(d);\n      }\n    };\n\n    // Initialize ResizeObserver\n    const resizeObserver = new ResizeObserver((entries) => {\n      // For all entries, recalculate the path\n      for (let entry of entries) {\n        updatePath();\n      }\n    });\n\n    // Observe the container element\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n\n    // Call the updatePath initially to set the initial path\n    updatePath();\n\n    // Clean up the observer on component unmount\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [\n    containerRef,\n    fromRef,\n    toRef,\n    curvature,\n    startXOffset,\n    startYOffset,\n    endXOffset,\n    endYOffset,\n  ]);\n\n  return (\n    <svg\n      fill=\"none\"\n      width={svgDimensions.width}\n      height={svgDimensions.height}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\n        \"pointer-events-none absolute left-0 top-0 transform-gpu stroke-2\",\n        className,\n      )}\n      viewBox={`0 0 ${svgDimensions.width} ${svgDimensions.height}`}\n    >\n      <path\n        d={pathD}\n        stroke={pathColor}\n        strokeWidth={pathWidth}\n        strokeOpacity={pathOpacity}\n        strokeLinecap=\"round\"\n      />\n      <path\n        d={pathD}\n        strokeWidth={pathWidth}\n        stroke={`url(#${id})`}\n        strokeOpacity=\"1\"\n        strokeLinecap=\"round\"\n      />\n      <defs>\n        <motion.linearGradient\n          className=\"transform-gpu\"\n          id={id}\n          gradientUnits={\"userSpaceOnUse\"}\n          initial={{\n            x1: \"0%\",\n            x2: \"0%\",\n            y1: \"0%\",\n            y2: \"0%\",\n          }}\n          animate={{\n            x1: gradientCoordinates.x1,\n            x2: gradientCoordinates.x2,\n            y1: gradientCoordinates.y1,\n            y2: gradientCoordinates.y2,\n          }}\n          transition={{\n            delay,\n            duration,\n            ease: [0.16, 1, 0.3, 1], // https://easings.net/#easeOutExpo\n            repeat: Infinity,\n            repeatDelay: 0,\n          }}\n        >\n          <stop stopColor={gradientStartColor} stopOpacity=\"0\"></stop>\n          <stop stopColor={gradientStartColor}></stop>\n          <stop offset=\"32.5%\" stopColor={gradientStopColor}></stop>\n          <stop\n            offset=\"100%\"\n            stopColor={gradientStopColor}\n            stopOpacity=\"0\"\n          ></stop>\n        </motion.linearGradient>\n      </defs>\n    </svg>\n  );\n};\n"
      }
    ],
    "name": "animated-beam"
  },
  {
    "files": [
      {
        "name": "animated-gradient-text.tsx",
        "dir": "components/magicui",
        "content": "import { cn } from \"@/lib/utils\";\nimport { ReactNode } from \"react\";\n\nexport default function AnimatedGradientText({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) {\n  return (\n    <div\n      className={cn(\n        \"group relative mx-auto flex max-w-fit flex-row items-center justify-center rounded-2xl bg-white/40 px-4 py-1.5 text-sm font-medium shadow-[inset_0_-8px_10px_#8fdfff1f] backdrop-blur-sm transition-shadow duration-500 ease-out [--bg-size:300%] hover:shadow-[inset_0_-5px_10px_#8fdfff3f] dark:bg-black/40\",\n        className,\n      )}\n    >\n      <div\n        className={`absolute inset-0 block h-full w-full animate-gradient bg-gradient-to-r from-[#ffaa40]/50 via-[#9c40ff]/50 to-[#ffaa40]/50 bg-[length:var(--bg-size)_100%] p-[1px] ![mask-composite:subtract] [border-radius:inherit] [mask:linear-gradient(#fff_0_0)_content-box,linear-gradient(#fff_0_0)]`}\n      />\n\n      {children}\n    </div>\n  );\n}\n"
      }
    ],
    "name": "animated-gradient-text"
  },
  {
    "files": [
      {
        "name": "animated-grid-pattern.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\nimport { useEffect, useId, useRef, useState } from \"react\";\n\ninterface GridPatternProps {\n  width?: number;\n  height?: number;\n  x?: number;\n  y?: number;\n  strokeDasharray?: any;\n  numSquares?: number;\n  className?: string;\n  maxOpacity?: number;\n  duration?: number;\n  repeatDelay?: number;\n}\n\nexport function GridPattern({\n  width = 40,\n  height = 40,\n  x = -1,\n  y = -1,\n  strokeDasharray = 0,\n  numSquares = 50,\n  className,\n  maxOpacity = 0.5,\n  duration = 4,\n  repeatDelay = 0.5,\n  ...props\n}: GridPatternProps) {\n  const id = useId();\n  const containerRef = useRef(null);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  const [squares, setSquares] = useState(() => generateSquares(numSquares));\n\n  function getPos() {\n    return [\n      Math.floor((Math.random() * dimensions.width) / width),\n      Math.floor((Math.random() * dimensions.height) / height),\n    ];\n  }\n\n  // Adjust the generateSquares function to return objects with an id, x, and y\n  function generateSquares(count: number) {\n    return Array.from({ length: count }, (_, i) => ({\n      id: i,\n      pos: getPos(),\n    }));\n  }\n\n  // Function to update a single square's position\n  const updateSquarePosition = (id: number) => {\n    setSquares((currentSquares) =>\n      currentSquares.map((sq) =>\n        sq.id === id\n          ? {\n              ...sq,\n              pos: getPos(),\n            }\n          : sq,\n      ),\n    );\n  };\n\n  // Update squares to animate in\n  useEffect(() => {\n    if (dimensions.width && dimensions.height) {\n      setSquares(generateSquares(numSquares));\n    }\n  }, [dimensions, numSquares]);\n\n  // Resize observer to update container dimensions\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (let entry of entries) {\n        setDimensions({\n          width: entry.contentRect.width,\n          height: entry.contentRect.height,\n        });\n      }\n    });\n\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n\n    return () => {\n      if (containerRef.current) {\n        resizeObserver.unobserve(containerRef.current);\n      }\n    };\n  }, [containerRef]);\n\n  return (\n    <svg\n      ref={containerRef}\n      aria-hidden=\"true\"\n      className={cn(\n        \"pointer-events-none absolute inset-0 h-full w-full fill-gray-400/30 stroke-gray-400/30\",\n        className,\n      )}\n      {...props}\n    >\n      <defs>\n        <pattern\n          id={id}\n          width={width}\n          height={height}\n          patternUnits=\"userSpaceOnUse\"\n          x={x}\n          y={y}\n        >\n          <path\n            d={`M.5 ${height}V.5H${width}`}\n            fill=\"none\"\n            strokeDasharray={strokeDasharray}\n          />\n        </pattern>\n      </defs>\n      <rect width=\"100%\" height=\"100%\" fill={`url(#${id})`} />\n      <svg x={x} y={y} className=\"overflow-visible\">\n        {squares.map(({ pos: [x, y], id }, index) => (\n          <motion.rect\n            initial={{ opacity: 0 }}\n            animate={{ opacity: maxOpacity }}\n            transition={{\n              duration,\n              repeat: 1,\n              delay: index * 0.1,\n              repeatType: \"reverse\",\n            }}\n            onAnimationComplete={() => updateSquarePosition(id)}\n            key={`${x}-${y}-${index}`}\n            width={width - 1}\n            height={height - 1}\n            x={x * width + 1}\n            y={y * height + 1}\n            fill=\"currentColor\"\n            strokeWidth=\"0\"\n          />\n        ))}\n      </svg>\n    </svg>\n  );\n}\n\nexport default GridPattern;\n"
      }
    ],
    "name": "animated-grid-pattern"
  },
  {
    "files": [
      {
        "name": "animated-lines.tsx",
        "dir": "components/magicui",
        "content": "export default function AnimatedLines() {\n  return (\n    <svg\n      viewBox=\"0 0 1005 758\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"stroke-[5px] [mask-repeat:no-repeat] [mask-size:40px]\"\n    >\n      <path\n        d=\"M0.000366211 3C382.5 3 313 362.999 1005 362.999\"\n        stroke=\"white\"\n      />\n\n      <path d=\"M1004.78 383.5H0.000366211\" stroke=\"white\" />\n      <path\n        d=\"M1005 404.5C313 404.5 379.5 755.5 0.000366211 755.5\"\n        stroke=\"white\"\n      />\n\n      <path\n        d=\"M0.000366211 3C382.5 3 313 362.999 1005 362.999\"\n        className=\"animate-line stroke-blue-500 [mask-image:linear-gradient(to_right,transparent,black,transparent)]\"\n      />\n      <path\n        d=\"M1004.78 383.5H0.000366211\"\n        className=\"animate-line stroke-red-500 [mask-image:linear-gradient(to_right,transparent,black,transparent)]\"\n      />\n      <path\n        d=\"M1005 404.5C313 404.5 379.5 755.5 0.000366211 755.5\"\n        className=\"animate-line stroke-green-500 [mask-image:linear-gradient(to_right,transparent,black,transparent)]\"\n      />\n    </svg>\n  );\n}\n"
      }
    ],
    "name": "animated-lines"
  },
  {
    "files": [
      {
        "name": "animated-list.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport React, { ReactElement, useEffect, useMemo, useState } from \"react\";\n\nexport const AnimatedList = React.memo(\n  ({\n    className,\n    children,\n    delay = 1000,\n  }: {\n    className?: string;\n    children: React.ReactNode;\n    delay?: number;\n  }) => {\n    const [index, setIndex] = useState(0);\n    const childrenArray = React.Children.toArray(children);\n\n    useEffect(() => {\n      const interval = setInterval(() => {\n        setIndex((prevIndex) => (prevIndex + 1) % childrenArray.length);\n      }, delay);\n\n      return () => clearInterval(interval);\n    }, [childrenArray.length, delay]);\n\n    const itemsToShow = useMemo(\n      () => childrenArray.slice(0, index + 1).reverse(),\n      [index, childrenArray],\n    );\n\n    return (\n      <div className={`flex flex-col items-center gap-4 ${className}`}>\n        <AnimatePresence>\n          {itemsToShow.map((item) => (\n            <AnimatedListItem key={(item as ReactElement).key}>\n              {item}\n            </AnimatedListItem>\n          ))}\n        </AnimatePresence>\n      </div>\n    );\n  },\n);\n\nAnimatedList.displayName = \"AnimatedList\";\n\nexport function AnimatedListItem({ children }: { children: React.ReactNode }) {\n  const animations = {\n    initial: { scale: 0, opacity: 0 },\n    animate: { scale: 1, opacity: 1, originY: 0 },\n    exit: { scale: 0, opacity: 0 },\n    transition: { type: \"spring\", stiffness: 350, damping: 40 },\n  };\n\n  return (\n    <motion.div {...animations} layout className=\"mx-auto w-full\">\n      {children}\n    </motion.div>\n  );\n}\n"
      }
    ],
    "name": "animated-list"
  },
  {
    "files": [
      {
        "name": "animated-shiny-text.tsx",
        "dir": "components/magicui",
        "content": "import { cn } from \"@/lib/utils\";\nimport { CSSProperties, FC, ReactNode } from \"react\";\n\ninterface AnimatedShinyTextProps {\n  children: ReactNode;\n  className?: string;\n  shimmerWidth?: number;\n}\n\nconst AnimatedShinyText: FC<AnimatedShinyTextProps> = ({\n  children,\n  className,\n  shimmerWidth = 100,\n}) => {\n  return (\n    <p\n      style={\n        {\n          \"--shimmer-width\": `${shimmerWidth}px`,\n        } as CSSProperties\n      }\n      className={cn(\n        \"mx-auto max-w-md text-neutral-600/50 dark:text-neutral-400/50 \",\n\n        // Shimmer effect\n        \"animate-shimmer bg-clip-text bg-no-repeat [background-position:0_0] [background-size:var(--shimmer-width)_100%] [transition:background-position_1s_cubic-bezier(.6,.6,0,1)_infinite]\",\n\n        // Shimmer gradient\n        \"bg-gradient-to-r from-transparent via-black/80 via-50% to-transparent  dark:via-white/80\",\n\n        className,\n      )}\n    >\n      {children}\n    </p>\n  );\n};\n\nexport default AnimatedShinyText;\n"
      }
    ],
    "name": "animated-shiny-text"
  },
  {
    "files": [
      {
        "name": "avatar-circles.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface AvatarCirclesProps {\n  className?: string;\n  numPeople?: number;\n}\n\nexport default function AvatarCircles({\n  numPeople,\n  className,\n}: AvatarCirclesProps) {\n  return (\n    <div className={cn(\"z-10 flex -space-x-4 rtl:space-x-reverse\", className)}>\n      <img\n        className=\"h-10 w-10 rounded-full border-2 border-white dark:border-gray-800\"\n        src=\"https://avatars.githubusercontent.com/u/16860528\"\n        alt=\"\"\n      />\n      <img\n        className=\"h-10 w-10 rounded-full border-2 border-white dark:border-gray-800\"\n        src=\"https://avatars.githubusercontent.com/u/29210732\"\n        alt=\"\"\n      />\n      <img\n        className=\"h-10 w-10 rounded-full border-2 border-white dark:border-gray-800\"\n        src=\"https://avatars.githubusercontent.com/u/20110627\"\n        alt=\"\"\n      />\n      <a className=\"flex h-10 w-10 items-center justify-center rounded-full border-2 border-white bg-black text-center text-xs font-medium text-white hover:bg-gray-600 dark:border-gray-800 dark:bg-white dark:text-black\">\n        +{numPeople}\n      </a>\n    </div>\n  );\n}\n"
      }
    ],
    "name": "avatar-circles"
  },
  {
    "files": [
      {
        "name": "bento-grid.tsx",
        "dir": "components/magicui",
        "content": "import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { ArrowRightIcon } from \"@radix-ui/react-icons\";\nimport { ReactNode } from \"react\";\n\nconst BentoGrid = ({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) => {\n  return (\n    <div\n      className={cn(\n        \"grid w-full auto-rows-[22rem] grid-cols-3 gap-4\",\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nconst BentoCard = ({\n  name,\n  className,\n  background,\n  Icon,\n  description,\n  href,\n  cta,\n}: {\n  name: string;\n  className: string;\n  background: ReactNode;\n  Icon: any;\n  description: string;\n  href: string;\n  cta: string;\n}) => (\n  <div\n    key={name}\n    className={cn(\n      \"group relative col-span-3 flex flex-col justify-between overflow-hidden rounded-xl\",\n      // light styles\n      \"bg-white [box-shadow:0_0_0_1px_rgba(0,0,0,.03),0_2px_4px_rgba(0,0,0,.05),0_12px_24px_rgba(0,0,0,.05)]\",\n      // dark styles\n      \"transform-gpu dark:bg-black dark:[border:1px_solid_rgba(255,255,255,.1)] dark:[box-shadow:0_-20px_80px_-20px_#ffffff1f_inset]\",\n      className,\n    )}\n  >\n    <div>{background}</div>\n    <div className=\"pointer-events-none z-10 flex transform-gpu flex-col gap-1 p-6 transition-all duration-300 group-hover:-translate-y-10\">\n      <Icon className=\"h-12 w-12 origin-left transform-gpu text-neutral-700 transition-all duration-300 ease-in-out group-hover:scale-75\" />\n      <h3 className=\"text-xl font-semibold text-neutral-700 dark:text-neutral-300\">\n        {name}\n      </h3>\n      <p className=\"max-w-lg text-neutral-400\">{description}</p>\n    </div>\n\n    <div\n      className={cn(\n        \"pointer-events-none absolute bottom-0 flex w-full translate-y-10 transform-gpu flex-row items-center p-4 opacity-0 transition-all duration-300 group-hover:translate-y-0 group-hover:opacity-100\",\n      )}\n    >\n      <Button variant=\"ghost\" asChild size=\"sm\" className=\"pointer-events-auto\">\n        <a href={href}>\n          {cta}\n          <ArrowRightIcon className=\"ml-2 h-4 w-4\" />\n        </a>\n      </Button>\n    </div>\n    <div className=\"pointer-events-none absolute inset-0 transform-gpu transition-all duration-300 group-hover:bg-black/[.03] group-hover:dark:bg-neutral-800/10\" />\n  </div>\n);\n\nexport { BentoCard, BentoGrid };\n"
      }
    ],
    "name": "bento-grid"
  },
  {
    "files": [
      {
        "name": "blur-in.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BlurIntProps {\n  word: string;\n  className?: string;\n  variant?: {\n    hidden: { filter: string; opacity: number };\n    visible: { filter: string; opacity: number };\n  };\n  duration?: number;\n}\nconst BlurIn = ({ word, className, variant, duration = 1 }: BlurIntProps) => {\n  const defaultVariants = {\n    hidden: { filter: \"blur(10px)\", opacity: 0 },\n    visible: { filter: \"blur(0px)\", opacity: 1 },\n  };\n  const combinedVariants = variant || defaultVariants;\n\n  return (\n    <motion.h1\n      initial=\"hidden\"\n      animate=\"visible\"\n      transition={{ duration }}\n      variants={combinedVariants}\n      className={cn(\n        className,\n        \"font-display text-center text-4xl font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\",\n      )}\n    >\n      {word}\n    </motion.h1>\n  );\n};\n\nexport default BlurIn;\n"
      }
    ],
    "name": "blur-in"
  },
  {
    "files": [
      {
        "name": "border-beam.tsx",
        "dir": "components/magicui",
        "content": "import { cn } from \"@/lib/utils\";\n\ninterface BorderBeamProps {\n  className?: string;\n  size?: number;\n  duration?: number;\n  borderWidth?: number;\n  anchor?: number;\n  colorFrom?: string;\n  colorTo?: string;\n  delay?: number;\n}\n\nexport const BorderBeam = ({\n  className,\n  size = 200,\n  duration = 15,\n  anchor = 90,\n  borderWidth = 1.5,\n  colorFrom = \"#ffaa40\",\n  colorTo = \"#9c40ff\",\n  delay = 0,\n}: BorderBeamProps) => {\n  return (\n    <div\n      style={\n        {\n          \"--size\": size,\n          \"--duration\": duration,\n          \"--anchor\": anchor,\n          \"--border-width\": borderWidth,\n          \"--color-from\": colorFrom,\n          \"--color-to\": colorTo,\n          \"--delay\": `-${delay}s`,\n        } as React.CSSProperties\n      }\n      className={cn(\n        \"absolute inset-[0] rounded-[inherit] [border:calc(var(--border-width)*1px)_solid_transparent]\",\n\n        // mask styles\n        \"![mask-clip:padding-box,border-box] ![mask-composite:intersect] [mask:linear-gradient(transparent,transparent),linear-gradient(white,white)]\",\n\n        // pseudo styles\n        \"after:absolute after:aspect-square after:w-[calc(var(--size)*1px)] after:animate-border-beam after:[animation-delay:var(--delay)] after:[background:linear-gradient(to_left,var(--color-from),var(--color-to),transparent)] after:[offset-anchor:calc(var(--anchor)*1%)_50%] after:[offset-path:rect(0_auto_auto_0_round_calc(var(--size)*1px))]\",\n        className,\n      )}\n    />\n  );\n};\n"
      }
    ],
    "name": "border-beam"
  },
  {
    "files": [
      {
        "name": "client-tweet-card.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport {\n  MagicTweet,\n  TweetNotFound,\n  TweetSkeleton,\n} from \"@/registry/components/magicui/tweet-card\";\nimport { TweetProps, useTweet } from \"react-tweet\";\n\nconst ClientTweetCard = ({\n  id,\n  apiUrl,\n  fallback = <TweetSkeleton />,\n  components,\n  fetchOptions,\n  onError,\n  ...props\n}: TweetProps & { className?: string }) => {\n  const { data, error, isLoading } = useTweet(id, apiUrl, fetchOptions);\n\n  if (isLoading) return fallback;\n  if (error || !data) {\n    const NotFound = components?.TweetNotFound || TweetNotFound;\n    return <NotFound error={onError ? onError(error) : error} />;\n  }\n\n  return <MagicTweet tweet={data} components={components} {...props} />;\n};\n\nexport default ClientTweetCard;\n"
      }
    ],
    "name": "client-tweet-card"
  },
  {
    "files": [
      {
        "name": "dock.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { motion, useMotionValue, useSpring, useTransform } from \"framer-motion\";\nimport React, { PropsWithChildren, useRef } from \"react\";\n\nexport interface DockProps extends VariantProps<typeof dockVariants> {\n  className?: string;\n  magnification?: number;\n  distance?: number;\n  children: React.ReactNode;\n}\n\nconst DEFAULT_MAGNIFICATION = 60;\nconst DEFAULT_DISTANCE = 140;\n\nconst dockVariants = cva(\n  \"mx-auto w-max mt-8 h-[58px] p-2 flex items-end gap-2 rounded-2xl border dark:border-[#707070]\",\n);\n\nconst Dock = React.forwardRef<HTMLDivElement, DockProps>(\n  (\n    {\n      className,\n      children,\n      magnification = DEFAULT_MAGNIFICATION,\n      distance = DEFAULT_DISTANCE,\n      ...props\n    },\n    ref,\n  ) => {\n    const mouseX = useMotionValue(Infinity);\n\n    const renderChildren = () => {\n      return React.Children.map(children, (child: any) => {\n        return React.cloneElement(child, {\n          mouseX: mouseX,\n          magnification: magnification,\n          distance: distance,\n        });\n      });\n    };\n\n    return (\n      <motion.div\n        ref={ref}\n        onMouseMove={(e) => mouseX.set(e.pageX)}\n        onMouseLeave={() => mouseX.set(Infinity)}\n        {...props}\n        className={cn(dockVariants({ className }), className)}\n      >\n        {renderChildren()}\n      </motion.div>\n    );\n  },\n);\n\nDock.displayName = \"Dock\";\n\nexport interface DockIconProps {\n  size?: number;\n  magnification?: number;\n  distance?: number;\n  mouseX?: any;\n  className?: string;\n  children?: React.ReactNode;\n  props?: PropsWithChildren;\n}\n\nconst DockIcon = ({\n  size,\n  magnification = DEFAULT_MAGNIFICATION,\n  distance = DEFAULT_DISTANCE,\n  mouseX,\n  className,\n  children,\n  ...props\n}: DockIconProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const distanceCalc = useTransform(mouseX, (val: number) => {\n    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 };\n\n    return val - bounds.x - bounds.width / 2;\n  });\n\n  let widthSync = useTransform(\n    distanceCalc,\n    [-distance, 0, distance],\n    [40, magnification, 40],\n  );\n\n  let width = useSpring(widthSync, {\n    mass: 0.1,\n    stiffness: 150,\n    damping: 12,\n  });\n\n  return (\n    <motion.div\n      ref={ref}\n      style={{ width }}\n      className={cn(\n        \"flex aspect-square cursor-pointer items-center justify-center rounded-full bg-neutral-400/40\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </motion.div>\n  );\n};\n\nDockIcon.displayName = \"DockIcon\";\n\nexport { Dock, DockIcon, dockVariants };\n"
      }
    ],
    "name": "dock"
  },
  {
    "files": [
      {
        "name": "dot-pattern.tsx",
        "dir": "components/magicui",
        "content": "import { cn } from \"@/lib/utils\";\nimport { useId } from \"react\";\n\ninterface DotPatternProps {\n  width?: any;\n  height?: any;\n  x?: any;\n  y?: any;\n  cx?: any;\n  cy?: any;\n  cr?: any;\n  className?: string;\n  [key: string]: any;\n}\nexport function DotPattern({\n  width = 16,\n  height = 16,\n  x = 0,\n  y = 0,\n  cx = 1,\n  cy = 1,\n  cr = 1,\n  className,\n  ...props\n}: DotPatternProps) {\n  const id = useId();\n\n  return (\n    <svg\n      aria-hidden=\"true\"\n      className={cn(\n        \"pointer-events-none absolute inset-0 h-full w-full fill-neutral-400/80\",\n        className,\n      )}\n      {...props}\n    >\n      <defs>\n        <pattern\n          id={id}\n          width={width}\n          height={height}\n          patternUnits=\"userSpaceOnUse\"\n          patternContentUnits=\"userSpaceOnUse\"\n          x={x}\n          y={y}\n        >\n          <circle id=\"pattern-circle\" cx={cy} cy={cy} r={cr} />\n        </pattern>\n      </defs>\n      <rect width=\"100%\" height=\"100%\" strokeWidth={0} fill={`url(#${id})`} />\n    </svg>\n  );\n}\n\nexport default DotPattern;\n"
      }
    ],
    "name": "dot-pattern"
  },
  {
    "files": [
      {
        "name": "flip-text.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, Variants, motion } from \"framer-motion\";\n\ninterface SlightFlipProps {\n  word: string;\n  duration?: number;\n  delayMultiple?: number;\n  framerProps?: Variants;\n  className?: string;\n}\n\nexport default function SlightFlip({\n  word,\n  duration = 0.5,\n  delayMultiple = 0.08,\n  framerProps = {\n    hidden: { rotateX: -90, opacity: 0 },\n    visible: { rotateX: 0, opacity: 1 },\n  },\n  className,\n}: SlightFlipProps) {\n  return (\n    <div className=\"flex justify-center space-x-2\">\n      <AnimatePresence mode=\"wait\">\n        {word.split(\"\").map((char, i) => (\n          <motion.span\n            key={i}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n            variants={framerProps}\n            transition={{ duration, delay: i * delayMultiple }}\n            className={cn(\"origin-center drop-shadow-sm\", className)}\n          >\n            {char}\n          </motion.span>\n        ))}\n      </AnimatePresence>\n    </div>\n  );\n}\n"
      }
    ],
    "name": "flip-text"
  },
  {
    "files": [
      {
        "name": "globe.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport createGlobe, { COBEOptions } from \"cobe\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { useSpring } from \"react-spring\";\n\nconst GLOBE_CONFIG: COBEOptions = {\n  width: 800,\n  height: 800,\n  onRender: () => {},\n  devicePixelRatio: 2,\n  phi: 0,\n  theta: 0.3,\n  dark: 0,\n  diffuse: 0.4,\n  mapSamples: 16000,\n  mapBrightness: 1.2,\n  baseColor: [1, 1, 1],\n  markerColor: [251 / 255, 100 / 255, 21 / 255],\n  glowColor: [1, 1, 1],\n  markers: [\n    { location: [14.5995, 120.9842], size: 0.03 },\n    { location: [19.076, 72.8777], size: 0.1 },\n    { location: [23.8103, 90.4125], size: 0.05 },\n    { location: [30.0444, 31.2357], size: 0.07 },\n    { location: [39.9042, 116.4074], size: 0.08 },\n    { location: [-23.5505, -46.6333], size: 0.1 },\n    { location: [19.4326, -99.1332], size: 0.1 },\n    { location: [40.7128, -74.006], size: 0.1 },\n    { location: [34.6937, 135.5022], size: 0.05 },\n    { location: [41.0082, 28.9784], size: 0.06 },\n  ],\n};\n\nexport default function Globe({\n  className,\n  config = GLOBE_CONFIG,\n}: {\n  className?: string;\n  config?: COBEOptions;\n}) {\n  let phi = 0;\n  let width = 0;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const pointerInteracting = useRef(null);\n  const pointerInteractionMovement = useRef(0);\n  const [{ r }, api] = useSpring(() => ({\n    r: 0,\n    config: {\n      mass: 1,\n      tension: 280,\n      friction: 40,\n      precision: 0.001,\n    },\n  }));\n\n  const updatePointerInteraction = (value: any) => {\n    pointerInteracting.current = value;\n    canvasRef.current!.style.cursor = value ? \"grabbing\" : \"grab\";\n  };\n\n  const updateMovement = (clientX: any) => {\n    if (pointerInteracting.current !== null) {\n      const delta = clientX - pointerInteracting.current;\n      pointerInteractionMovement.current = delta;\n      api.start({ r: delta / 200 });\n    }\n  };\n\n  const onRender = useCallback(\n    (state: Record<string, any>) => {\n      if (!pointerInteracting.current) phi += 0.005;\n      state.phi = phi + r.get();\n      state.width = width * 2;\n      state.height = width * 2;\n    },\n    [pointerInteracting, phi, r],\n  );\n\n  const onResize = () => {\n    if (canvasRef.current) {\n      width = canvasRef.current.offsetWidth;\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", onResize);\n    onResize();\n\n    const globe = createGlobe(canvasRef.current!, {\n      ...config,\n      width: width * 2,\n      height: width * 2,\n      onRender,\n    });\n\n    setTimeout(() => (canvasRef.current!.style.opacity = \"1\"));\n    return () => globe.destroy();\n  }, []);\n\n  return (\n    <div\n      className={cn(\n        \"absolute inset-0 mx-auto aspect-[1/1] w-full max-w-[600px]\",\n        className,\n      )}\n    >\n      <canvas\n        className={cn(\n          \"h-full w-full opacity-0 transition-opacity duration-500 [contain:layout_paint_size]\",\n        )}\n        ref={canvasRef}\n        onPointerDown={(e) =>\n          updatePointerInteraction(\n            e.clientX - pointerInteractionMovement.current,\n          )\n        }\n        onPointerUp={() => updatePointerInteraction(null)}\n        onPointerOut={() => updatePointerInteraction(null)}\n        onMouseMove={(e) => updateMovement(e.clientX)}\n        onTouchMove={(e) =>\n          e.touches[0] && updateMovement(e.touches[0].clientX)\n        }\n      />\n    </div>\n  );\n}\n"
      }
    ],
    "name": "globe"
  },
  {
    "files": [
      {
        "name": "grid-pattern.tsx",
        "dir": "components/magicui",
        "content": "import { cn } from \"@/lib/utils\";\nimport { useId } from \"react\";\n\ninterface GridPatternProps {\n  width?: any;\n  height?: any;\n  x?: any;\n  y?: any;\n  squares?: Array<[x: number, y: number]>;\n  strokeDasharray?: any;\n  className?: string;\n  [key: string]: any;\n}\n\nexport function GridPattern({\n  width = 40,\n  height = 40,\n  x = -1,\n  y = -1,\n  strokeDasharray = 0,\n  squares,\n  className,\n  ...props\n}: GridPatternProps) {\n  const id = useId();\n\n  return (\n    <svg\n      aria-hidden=\"true\"\n      className={cn(\n        \"pointer-events-none absolute inset-0 h-full w-full fill-gray-400/30 stroke-gray-400/30\",\n        className,\n      )}\n      {...props}\n    >\n      <defs>\n        <pattern\n          id={id}\n          width={width}\n          height={height}\n          patternUnits=\"userSpaceOnUse\"\n          x={x}\n          y={y}\n        >\n          <path\n            d={`M.5 ${height}V.5H${width}`}\n            fill=\"none\"\n            strokeDasharray={strokeDasharray}\n          />\n        </pattern>\n      </defs>\n      <rect width=\"100%\" height=\"100%\" strokeWidth={0} fill={`url(#${id})`} />\n      {squares && (\n        <svg x={x} y={y} className=\"overflow-visible\">\n          {squares.map(([x, y]) => (\n            <rect\n              strokeWidth=\"0\"\n              key={`${x}-${y}`}\n              width={width - 1}\n              height={height - 1}\n              x={x * width + 1}\n              y={y * height + 1}\n            />\n          ))}\n        </svg>\n      )}\n    </svg>\n  );\n}\n\nexport default GridPattern;\n"
      }
    ],
    "name": "grid-pattern"
  },
  {
    "files": [
      {
        "name": "hero-video.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Dialog, Transition } from \"@headlessui/react\";\nimport { X } from \"lucide-react\";\nimport React, { Fragment, useContext, useState } from \"react\";\n\ninterface HeroVideoProps {\n  children?: React.ReactNode;\n  image?: string;\n  className?: string;\n  caption?: React.ReactNode;\n  video?: string;\n  title?: string;\n}\n\ninterface HeroVideoContextType {\n  openModal?: () => void;\n  closeModal?: () => void;\n}\n\nconst HeroVideoContext = React.createContext<HeroVideoContextType>({});\n\nexport const HeroVideoAction = ({\n  children,\n}: {\n  children: React.ReactElement;\n}) => {\n  const context = useContext(HeroVideoContext);\n\n  if (!context) {\n    throw new Error(\"HeroVideoAction must be used within a HeroVideo\");\n  }\n\n  const { openModal } = context;\n\n  // Create a clone of the child and inject the onClick event to it\n  const childWithOnClick = React.cloneElement(children, {\n    onClick: openModal,\n  });\n\n  return (\n    <div className=\"absolute left-1/2 top-1/2 z-50 -translate-x-1/2 -translate-y-1/2 transform\">\n      {childWithOnClick}\n    </div>\n  );\n};\n\nconst HeroVideo = ({ children, image, title = \"Demo\" }: HeroVideoProps) => {\n  let [isOpen, setIsOpen] = useState(false);\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  // Extracting children based on type\n  let actionChild: React.ReactElement | null = null;\n  let otherChildren: React.ReactElement[] = [];\n\n  React.Children.forEach(children, (child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === HeroVideoAction) {\n        actionChild = child;\n      } else {\n        otherChildren.push(child);\n      }\n    }\n  });\n\n  return (\n    <HeroVideoContext.Provider value={{ openModal, closeModal }}>\n      <div\n        className={cn(\"absolute inset-[1px] flex overflow-hidden rounded-2xl\")}\n      >\n        {actionChild}\n        <img\n          className=\"pointer-events-none h-full w-full object-cover\"\n          src={image}\n        />\n      </div>\n\n      {/* Modal */}\n      <Transition appear show={isOpen} as={Fragment}>\n        <Dialog as=\"div\" className=\"relative z-50\" onClose={closeModal}>\n          {/* Backdrop */}\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-500\"\n            enterFrom=\"opacity-0\"\n            enterTo=\"opacity-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <div className=\"fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm\" />\n          </Transition.Child>\n\n          {/* Video Modal */}\n          <div className=\"fixed inset-0 overflow-y-auto\">\n            <div className=\"flex min-h-full items-center justify-center p-4 text-center\">\n              <Transition.Child\n                as={Fragment}\n                enter=\"ease-out duration-500\"\n                enterFrom=\"opacity-0 scale-95\"\n                enterTo=\"opacity-100 scale-100\"\n                leave=\"ease-in duration-200\"\n                leaveFrom=\"opacity-100 scale-100\"\n                leaveTo=\"opacity-0 scale-95\"\n              >\n                <Dialog.Panel className=\"flex w-full max-w-4xl transform flex-col gap-2 overflow-hidden rounded-2xl p-6 text-left align-middle transition-all\">\n                  <div className=\"flex flex-row items-center justify-between\">\n                    <h3 className=\"text-lg font-medium leading-6 text-gray-100\">\n                      {title}\n                    </h3>\n                    {closeModal && (\n                      <button onClick={closeModal} aria-label=\"Close\">\n                        <X className=\"h-6 w-6 text-gray-100\" />\n                      </button>\n                    )}\n                  </div>\n                  {otherChildren}\n                </Dialog.Panel>\n              </Transition.Child>\n            </div>\n          </div>\n        </Dialog>\n      </Transition>\n    </HeroVideoContext.Provider>\n  );\n};\n\nexport default HeroVideo;\n"
      }
    ],
    "name": "hero-video"
  },
  {
    "files": [
      {
        "name": "icon-cloud.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { useTheme } from \"next-themes\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport {\n  Cloud,\n  fetchSimpleIcons,\n  ICloud,\n  renderSimpleIcon,\n  SimpleIcon,\n} from \"react-icon-cloud\";\n\nexport const cloudProps: Omit<ICloud, \"children\"> = {\n  containerProps: {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      width: \"100%\",\n      paddingTop: 40,\n    },\n  },\n  options: {\n    reverse: true,\n    depth: 1,\n    wheelZoom: false,\n    imageScale: 2,\n    activeCursor: \"default\",\n    tooltip: \"native\",\n    initial: [0.1, -0.1],\n    clickToFront: 500,\n    tooltipDelay: 0,\n    outlineColour: \"#0000\",\n    maxSpeed: 0.04,\n    minSpeed: 0.02,\n  },\n};\n\nexport const renderCustomIcon = (icon: SimpleIcon, theme: string) => {\n  const bgHex = theme === \"light\" ? \"#f3f2ef\" : \"#080510\";\n  const fallbackHex = theme === \"light\" ? \"#6e6e73\" : \"#ffffff\";\n  const minContrastRatio = theme === \"dark\" ? 2 : 1.2;\n\n  return renderSimpleIcon({\n    icon,\n    bgHex,\n    fallbackHex,\n    minContrastRatio,\n    size: 42,\n    aProps: {\n      href: undefined,\n      target: undefined,\n      rel: undefined,\n      onClick: (e: any) => e.preventDefault(),\n    },\n  });\n};\n\nexport type DynamicCloudProps = {\n  iconSlugs: string[];\n};\n\ntype IconData = Awaited<ReturnType<typeof fetchSimpleIcons>>;\n\nexport default function IconCloud({ iconSlugs }: DynamicCloudProps) {\n  const [data, setData] = useState<IconData | null>(null);\n  const { theme } = useTheme();\n\n  useEffect(() => {\n    fetchSimpleIcons({ slugs: iconSlugs }).then(setData);\n  }, [iconSlugs]);\n\n  const renderedIcons = useMemo(() => {\n    if (!data) return null;\n\n    return Object.values(data.simpleIcons).map((icon) =>\n      renderCustomIcon(icon, theme || \"light\"),\n    );\n  }, [data, theme]);\n\n  return (\n    // @ts-ignore\n    <Cloud {...cloudProps}>\n      <>{renderedIcons}</>\n    </Cloud>\n  );\n}\n"
      }
    ],
    "name": "icon-cloud"
  },
  {
    "files": [
      {
        "name": "letter-pullup.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\n\ninterface LetterPullupProps {\n    className?: string;\n    words: string;\n    delay?: number\n}\n\nexport default function LetterPullup({\n    className,\n    words,\n    delay\n\n}: LetterPullupProps) {\n\n    const letters = words.split(\"\");\n  \n    const pullupVariant = {\n      initial: { y: 100, opacity: 0 },\n      animate: (i: any) => ({\n        y: 0,\n        opacity: 1,\n        transition: {\n          delay: i * (delay ? delay : 0.05), // By default, delay each letter's animation by 0.05 seconds\n        },\n      }),\n    };\n\n  return (\n    <div className = \"flex justify-center\">\n      \n      { letters.map((letter, i) => (\n        \n        <motion.h1\n          key = { i }\n          variants = { pullupVariant }\n          initial = \"initial\"\n          animate = \"animate\"\n          custom = { i }\n          className = { cn(\"text-center font-display text-4xl font-bold tracking-[-0.02em] drop-shadow-sm md:text-4xl md:leading-[5rem]\", className) }\n        >\n          {letter === \" \" ? <span>&nbsp;</span> : letter}\n        </motion.h1>\n\n      ))}\n\n    </div>\n  );\n}\n"
      }
    ],
    "name": "letter-pullup"
  },
  {
    "files": [
      {
        "name": "linear-gradient.tsx",
        "dir": "components/magicui",
        "content": "import { CSSProperties } from \"react\";\n\ntype Direction =\n  | \"top\"\n  | \"bottom\"\n  | \"left\"\n  | \"right\"\n  | \"top left\"\n  | \"top right\"\n  | \"bottom left\"\n  | \"bottom right\";\n\ninterface LinearGradientProps {\n  /**\n   * The color to transition from\n   * @default #00000000\n   * @type string\n   * */\n  from?: string;\n\n  /**\n   * The color to transition to\n   * @default #290A5C\n   * @type string\n   * */\n  to?: string;\n\n  /**\n   * The width of the gradient\n   * @default 100%\n   * @type string\n   * */\n  width?: string;\n\n  /**\n   * The height of the gradient\n   * @default 100%\n   * @type string\n   * */\n  height?: string;\n\n  /**\n   * The direction of the gradient\n   * @default bottom\n   * @type string\n   * */\n  direction?: Direction;\n\n  /**\n   * The point at which the transition occurs\n   * @default 50%\n   * @type string\n   * */\n  transitionPoint?: string;\n\n  /**\n   * The class name to apply to the gradient\n   * @default \"\"\n   * @type string\n   * */\n  className?: string;\n}\n\nconst LinearGradient = ({\n  from = \"#00000000\",\n  to = \"rgba(120,119,198,0.3)\",\n  width = \"100%\",\n  height = \"100%\",\n  transitionPoint = \"50%\",\n  direction = \"bottom\",\n  className,\n}: LinearGradientProps) => {\n  const styles: CSSProperties = {\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    inset: 0,\n    width: width,\n    height: height,\n    background: `linear-gradient(to ${direction}, ${from}, ${transitionPoint}, ${to})`,\n  };\n  return <div className={className} style={styles} />;\n};\n\nexport default LinearGradient;\n"
      }
    ],
    "name": "linear-gradient"
  },
  {
    "files": [
      {
        "name": "magic-card.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  CSSProperties,\n  ReactElement,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\ninterface MousePosition {\n  x: number;\n  y: number;\n}\n\nfunction useMousePosition(): MousePosition {\n  const [mousePosition, setMousePosition] = useState<MousePosition>({\n    x: 0,\n    y: 0,\n  });\n\n  useEffect(() => {\n    const handleMouseMove = (event: globalThis.MouseEvent) => {\n      setMousePosition({ x: event.clientX, y: event.clientY });\n    };\n\n    window.addEventListener(\"mousemove\", handleMouseMove);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n    };\n  }, []);\n\n  return mousePosition;\n}\n\ninterface MagicContainerProps {\n  children?: ReactNode;\n  className?: any;\n}\n\nconst MagicContainer = ({ children, className }: MagicContainerProps) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const mousePosition = useMousePosition();\n  const mouse = useRef<{ x: number; y: number }>({ x: 0, y: 0 });\n  const containerSize = useRef<{ w: number; h: number }>({ w: 0, h: 0 });\n  const [boxes, setBoxes] = useState<Array<HTMLElement>>([]);\n\n  useEffect(() => {\n    init();\n    containerRef.current &&\n      setBoxes(\n        Array.from(containerRef.current.children).map(\n          (el) => el as HTMLElement,\n        ),\n      );\n  }, []);\n\n  useEffect(() => {\n    init();\n    window.addEventListener(\"resize\", init);\n\n    return () => {\n      window.removeEventListener(\"resize\", init);\n    };\n  }, [setBoxes]);\n\n  useEffect(() => {\n    onMouseMove();\n  }, [mousePosition]);\n\n  const init = () => {\n    if (containerRef.current) {\n      containerSize.current.w = containerRef.current.offsetWidth;\n      containerSize.current.h = containerRef.current.offsetHeight;\n    }\n  };\n\n  const onMouseMove = () => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      const { w, h } = containerSize.current;\n      const x = mousePosition.x - rect.left;\n      const y = mousePosition.y - rect.top;\n      const inside = x < w && x > 0 && y < h && y > 0;\n\n      mouse.current.x = x;\n      mouse.current.y = y;\n      boxes.forEach((box) => {\n        const boxX =\n          -(box.getBoundingClientRect().left - rect.left) + mouse.current.x;\n        const boxY =\n          -(box.getBoundingClientRect().top - rect.top) + mouse.current.y;\n        box.style.setProperty(\"--mouse-x\", `${boxX}px`);\n        box.style.setProperty(\"--mouse-y\", `${boxY}px`);\n\n        if (inside) {\n          box.style.setProperty(\"--opacity\", `1`);\n        } else {\n          box.style.setProperty(\"--opacity\", `0`);\n        }\n      });\n    }\n  };\n\n  return (\n    <div className={cn(\"h-full w-full\", className)} ref={containerRef}>\n      {children}\n    </div>\n  );\n};\n\ninterface MagicCardProps {\n  /**\n   * @default <div />\n   * @type ReactElement\n   * @description\n   * The component to be rendered as the card\n   * */\n  as?: ReactElement;\n  /**\n   * @default \"\"\n   * @type string\n   * @description\n   * The className of the card\n   */\n  className?: string;\n\n  /**\n   * @default \"\"\n   * @type ReactNode\n   * @description\n   * The children of the card\n   * */\n  children?: ReactNode;\n\n  /**\n   * @default 600\n   * @type number\n   * @description\n   * The size of the spotlight effect in pixels\n   * */\n  size?: number;\n\n  /**\n   * @default true\n   * @type boolean\n   * @description\n   * Whether to show the spotlight\n   * */\n  spotlight?: boolean;\n\n  /**\n   * @default \"rgba(255,255,255,0.03)\"\n   * @type string\n   * @description\n   * The color of the spotlight\n   * */\n  spotlightColor?: string;\n\n  /**\n   * @default true\n   * @type boolean\n   * @description\n   * Whether to isolate the card which is being hovered\n   * */\n  isolated?: boolean;\n\n  /**\n   * @default \"rgba(255,255,255,0.03)\"\n   * @type string\n   * @description\n   * The background of the card\n   * */\n  background?: string;\n\n  [key: string]: any;\n}\n\nconst MagicCard: React.FC<MagicCardProps> = ({\n  className,\n  children,\n  size = 600,\n  spotlight = true,\n  borderColor = \"hsl(0 0% 98%)\",\n  isolated = true,\n  ...props\n}) => {\n  return (\n    <div\n      style={\n        {\n          \"--mask-size\": `${size}px`,\n          \"--border-color\": `${borderColor}`,\n        } as CSSProperties\n      }\n      className={cn(\n        \"relative z-0 h-full w-full rounded-2xl p-6\",\n        \"bg-gray-300 dark:bg-gray-700\",\n        \"bg-[radial-gradient(var(--mask-size)_circle_at_var(--mouse-x)_var(--mouse-y),var(--border-color),transparent_100%)]\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n\n      {/* Background */}\n      <div\n        className={\n          \"absolute inset-[1px] -z-20 rounded-2xl bg-white dark:bg-black/95\"\n        }\n      />\n    </div>\n  );\n};\n\nexport { MagicCard, MagicContainer };\n"
      }
    ],
    "name": "magic-card"
  },
  {
    "files": [
      {
        "name": "marquee.tsx",
        "dir": "components/magicui",
        "content": "import { cn } from \"@/lib/utils\";\n\ninterface MarqueeProps {\n  className?: string;\n  reverse?: boolean;\n  pauseOnHover?: boolean;\n  children?: React.ReactNode;\n  vertical?: boolean;\n  repeat?: number;\n  [key: string]: any;\n}\n\nexport default function Marquee({\n  className,\n  reverse,\n  pauseOnHover = false,\n  children,\n  vertical = false,\n  repeat = 4,\n  ...props\n}: MarqueeProps) {\n  return (\n    <div\n      {...props}\n      className={cn(\n        \"group flex overflow-hidden p-2 [--duration:40s] [--gap:1rem] [gap:var(--gap)]\",\n        {\n          \"flex-row\": !vertical,\n          \"flex-col\": vertical,\n        },\n        className,\n      )}\n    >\n      {Array(repeat)\n        .fill(0)\n        .map((_, i) => (\n          <div\n            key={i}\n            className={cn(\"flex shrink-0 justify-around [gap:var(--gap)]\", {\n              \"animate-marquee flex-row\": !vertical,\n              \"animate-marquee-vertical flex-col\": vertical,\n              \"group-hover:[animation-play-state:paused]\": pauseOnHover,\n              \"[animation-direction:reverse]\": reverse,\n            })}\n          >\n            {children}\n          </div>\n        ))}\n    </div>\n  );\n}\n"
      }
    ],
    "name": "marquee"
  },
  {
    "files": [
      {
        "name": "meteors.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport clsx from \"clsx\";\nimport { useEffect, useState } from \"react\";\n\ninterface MeteorsProps {\n  number?: number;\n}\nexport const Meteors = ({ number = 20 }: MeteorsProps) => {\n  const [meteorStyles, setMeteorStyles] = useState<Array<React.CSSProperties>>(\n    [],\n  );\n\n  useEffect(() => {\n    const styles = [...new Array(number)].map(() => ({\n      top: -5,\n      left: Math.floor(Math.random() * window.innerWidth) + \"px\",\n      animationDelay: Math.random() * 1 + 0.2 + \"s\",\n      animationDuration: Math.floor(Math.random() * 8 + 2) + \"s\",\n    }));\n    setMeteorStyles(styles);\n  }, [number]);\n\n  return (\n    <>\n      {[...meteorStyles].map((style, idx) => (\n        // Meteor Head\n        <span\n          key={idx}\n          className={clsx(\n            \"pointer-events-none absolute left-1/2 top-1/2 h-0.5 w-0.5 rotate-[215deg] animate-meteor rounded-[9999px] bg-slate-500 shadow-[0_0_0_1px_#ffffff10]\",\n          )}\n          style={style}\n        >\n          {/* Meteor Tail */}\n          <div className=\"pointer-events-none absolute top-1/2 -z-10 h-[1px] w-[50px] -translate-y-1/2 bg-gradient-to-r from-slate-500 to-transparent\" />\n        </span>\n      ))}\n    </>\n  );\n};\n\nexport default Meteors;\n"
      }
    ],
    "name": "meteors"
  },
  {
    "files": [
      {
        "name": "number-ticker.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { useInView, useMotionValue, useSpring } from \"framer-motion\";\nimport { useEffect, useRef } from \"react\";\n\nexport default function NumberTicker({\n  value,\n  direction = \"up\",\n  delay = 0,\n  className,\n}: {\n  value: number;\n  direction?: \"up\" | \"down\";\n  className?: string;\n  delay?: number; // delay in s\n}) {\n  const ref = useRef<HTMLSpanElement>(null);\n  const motionValue = useMotionValue(direction === \"down\" ? value : 0);\n  const springValue = useSpring(motionValue, {\n    damping: 60,\n    stiffness: 100,\n  });\n  const isInView = useInView(ref, { once: true, margin: \"0px\" });\n\n  useEffect(() => {\n    isInView &&\n      setTimeout(() => {\n        motionValue.set(direction === \"down\" ? 0 : value);\n      }, delay * 1000);\n  }, [motionValue, isInView, delay, value, direction]);\n\n  useEffect(\n    () =>\n      springValue.on(\"change\", (latest) => {\n        if (ref.current) {\n          ref.current.textContent = Intl.NumberFormat(\"en-US\").format(\n            latest.toFixed(0),\n          );\n        }\n      }),\n    [springValue],\n  );\n\n  return (\n    <span\n      className={`inline-block tabular-nums text-black dark:text-white ${className}`}\n      ref={ref}\n    />\n  );\n}\n"
      }
    ],
    "name": "number-ticker"
  },
  {
    "files": [
      {
        "name": "orbiting-circles.tsx",
        "dir": "components/magicui",
        "content": "import { cn } from \"@/lib/utils\";\n\nexport default function OrbitingCircles({\n  className,\n  children,\n  reverse,\n  duration = 20,\n  delay = 10,\n  radius = 50,\n  path = true,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n  reverse?: boolean;\n  duration?: number;\n  delay?: number;\n  radius?: number;\n  path?: boolean;\n}) {\n  return (\n    <>\n      {path && (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          version=\"1.1\"\n          className=\"pointer-events-none absolute inset-0 h-full w-full\"\n        >\n          <circle\n            className=\"stroke-black/10 stroke-1 dark:stroke-white/10\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={radius}\n            fill=\"none\"\n            strokeDasharray={\"4 4\"}\n          />\n        </svg>\n      )}\n\n      <div\n        style={\n          {\n            \"--duration\": duration,\n            \"--radius\": radius,\n            \"--delay\": -delay,\n          } as React.CSSProperties\n        }\n        className={cn(\n          \"absolute flex h-full w-full transform-gpu animate-orbit items-center justify-center rounded-full border bg-black/10 [animation-delay:calc(var(--delay)*1000ms)] dark:bg-white/10\",\n          { \"[animation-direction:reverse]\": reverse },\n          className,\n        )}\n      >\n        {children}\n      </div>\n    </>\n  );\n}\n"
      }
    ],
    "name": "orbiting-circles"
  },
  {
    "files": [
      {
        "name": "particles.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\n\ninterface MousePosition {\n  x: number;\n  y: number;\n}\n\nfunction MousePosition(): MousePosition {\n  const [mousePosition, setMousePosition] = useState<MousePosition>({\n    x: 0,\n    y: 0,\n  });\n\n  useEffect(() => {\n    const handleMouseMove = (event: MouseEvent) => {\n      setMousePosition({ x: event.clientX, y: event.clientY });\n    };\n\n    window.addEventListener(\"mousemove\", handleMouseMove);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n    };\n  }, []);\n\n  return mousePosition;\n}\n\ninterface ParticlesProps {\n  className?: string;\n  quantity?: number;\n  staticity?: number;\n  ease?: number;\n  size?: number;\n  refresh?: boolean;\n  color?: string;\n  vx?: number;\n  vy?: number;\n}\nfunction hexToRgb(hex: string): number[] {\n  hex = hex.replace(\"#\", \"\");\n  const hexInt = parseInt(hex, 16);\n  const red = (hexInt >> 16) & 255;\n  const green = (hexInt >> 8) & 255;\n  const blue = hexInt & 255;\n  return [red, green, blue];\n}\n\nconst Particles: React.FC<ParticlesProps> = ({\n  className = \"\",\n  quantity = 100,\n  staticity = 50,\n  ease = 50,\n  size = 0.4,\n  refresh = false,\n  color = \"#ffffff\",\n  vx = 0,\n  vy = 0,\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n  const context = useRef<CanvasRenderingContext2D | null>(null);\n  const circles = useRef<any[]>([]);\n  const mousePosition = MousePosition();\n  const mouse = useRef<{ x: number; y: number }>({ x: 0, y: 0 });\n  const canvasSize = useRef<{ w: number; h: number }>({ w: 0, h: 0 });\n  const dpr = typeof window !== \"undefined\" ? window.devicePixelRatio : 1;\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      context.current = canvasRef.current.getContext(\"2d\");\n    }\n    initCanvas();\n    animate();\n    window.addEventListener(\"resize\", initCanvas);\n\n    return () => {\n      window.removeEventListener(\"resize\", initCanvas);\n    };\n  }, [color]);\n\n  useEffect(() => {\n    onMouseMove();\n  }, [mousePosition.x, mousePosition.y]);\n\n  useEffect(() => {\n    initCanvas();\n  }, [refresh]);\n\n  const initCanvas = () => {\n    resizeCanvas();\n    drawParticles();\n  };\n\n  const onMouseMove = () => {\n    if (canvasRef.current) {\n      const rect = canvasRef.current.getBoundingClientRect();\n      const { w, h } = canvasSize.current;\n      const x = mousePosition.x - rect.left - w / 2;\n      const y = mousePosition.y - rect.top - h / 2;\n      const inside = x < w / 2 && x > -w / 2 && y < h / 2 && y > -h / 2;\n      if (inside) {\n        mouse.current.x = x;\n        mouse.current.y = y;\n      }\n    }\n  };\n\n  type Circle = {\n    x: number;\n    y: number;\n    translateX: number;\n    translateY: number;\n    size: number;\n    alpha: number;\n    targetAlpha: number;\n    dx: number;\n    dy: number;\n    magnetism: number;\n  };\n\n  const resizeCanvas = () => {\n    if (canvasContainerRef.current && canvasRef.current && context.current) {\n      circles.current.length = 0;\n      canvasSize.current.w = canvasContainerRef.current.offsetWidth;\n      canvasSize.current.h = canvasContainerRef.current.offsetHeight;\n      canvasRef.current.width = canvasSize.current.w * dpr;\n      canvasRef.current.height = canvasSize.current.h * dpr;\n      canvasRef.current.style.width = `${canvasSize.current.w}px`;\n      canvasRef.current.style.height = `${canvasSize.current.h}px`;\n      context.current.scale(dpr, dpr);\n    }\n  };\n\n  const circleParams = (): Circle => {\n    const x = Math.floor(Math.random() * canvasSize.current.w);\n    const y = Math.floor(Math.random() * canvasSize.current.h);\n    const translateX = 0;\n    const translateY = 0;\n    const pSize = Math.floor(Math.random() * 2) + size;\n    const alpha = 0;\n    const targetAlpha = parseFloat((Math.random() * 0.6 + 0.1).toFixed(1));\n    const dx = (Math.random() - 0.5) * 0.1;\n    const dy = (Math.random() - 0.5) * 0.1;\n    const magnetism = 0.1 + Math.random() * 4;\n    return {\n      x,\n      y,\n      translateX,\n      translateY,\n      size: pSize,\n      alpha,\n      targetAlpha,\n      dx,\n      dy,\n      magnetism,\n    };\n  };\n\n  const rgb = hexToRgb(color);\n\n  const drawCircle = (circle: Circle, update = false) => {\n    if (context.current) {\n      const { x, y, translateX, translateY, size, alpha } = circle;\n      context.current.translate(translateX, translateY);\n      context.current.beginPath();\n      context.current.arc(x, y, size, 0, 2 * Math.PI);\n      context.current.fillStyle = `rgba(${rgb.join(\", \")}, ${alpha})`;\n      context.current.fill();\n      context.current.setTransform(dpr, 0, 0, dpr, 0, 0);\n\n      if (!update) {\n        circles.current.push(circle);\n      }\n    }\n  };\n\n  const clearContext = () => {\n    if (context.current) {\n      context.current.clearRect(\n        0,\n        0,\n        canvasSize.current.w,\n        canvasSize.current.h,\n      );\n    }\n  };\n\n  const drawParticles = () => {\n    clearContext();\n    const particleCount = quantity;\n    for (let i = 0; i < particleCount; i++) {\n      const circle = circleParams();\n      drawCircle(circle);\n    }\n  };\n\n  const remapValue = (\n    value: number,\n    start1: number,\n    end1: number,\n    start2: number,\n    end2: number,\n  ): number => {\n    const remapped =\n      ((value - start1) * (end2 - start2)) / (end1 - start1) + start2;\n    return remapped > 0 ? remapped : 0;\n  };\n\n  const animate = () => {\n    clearContext();\n    circles.current.forEach((circle: Circle, i: number) => {\n      // Handle the alpha value\n      const edge = [\n        circle.x + circle.translateX - circle.size, // distance from left edge\n        canvasSize.current.w - circle.x - circle.translateX - circle.size, // distance from right edge\n        circle.y + circle.translateY - circle.size, // distance from top edge\n        canvasSize.current.h - circle.y - circle.translateY - circle.size, // distance from bottom edge\n      ];\n      const closestEdge = edge.reduce((a, b) => Math.min(a, b));\n      const remapClosestEdge = parseFloat(\n        remapValue(closestEdge, 0, 20, 0, 1).toFixed(2),\n      );\n      if (remapClosestEdge > 1) {\n        circle.alpha += 0.02;\n        if (circle.alpha > circle.targetAlpha) {\n          circle.alpha = circle.targetAlpha;\n        }\n      } else {\n        circle.alpha = circle.targetAlpha * remapClosestEdge;\n      }\n      circle.x += circle.dx + vx;\n      circle.y += circle.dy + vy;\n      circle.translateX +=\n        (mouse.current.x / (staticity / circle.magnetism) - circle.translateX) /\n        ease;\n      circle.translateY +=\n        (mouse.current.y / (staticity / circle.magnetism) - circle.translateY) /\n        ease;\n\n      drawCircle(circle, true);\n\n      // circle gets out of the canvas\n      if (\n        circle.x < -circle.size ||\n        circle.x > canvasSize.current.w + circle.size ||\n        circle.y < -circle.size ||\n        circle.y > canvasSize.current.h + circle.size\n      ) {\n        // remove the circle from the array\n        circles.current.splice(i, 1);\n        // create a new circle\n        const newCircle = circleParams();\n        drawCircle(newCircle);\n        // update the circle position\n      }\n    });\n    window.requestAnimationFrame(animate);\n  };\n\n  return (\n    <div className={className} ref={canvasContainerRef} aria-hidden=\"true\">\n      <canvas ref={canvasRef} className=\"h-full w-full\" />\n    </div>\n  );\n};\n\nexport default Particles;\n"
      }
    ],
    "name": "particles"
  },
  {
    "files": [
      {
        "name": "radial-gradient.tsx",
        "dir": "components/magicui",
        "content": "import { CSSProperties } from \"react\";\n\ntype Type = \"circle\" | \"ellipse\";\n\ntype Origin =\n  | \"center\"\n  | \"top\"\n  | \"bottom\"\n  | \"left\"\n  | \"right\"\n  | \"top left\"\n  | \"top right\"\n  | \"bottom left\"\n  | \"bottom right\";\n\ninterface RadialProps {\n  /**\n   * The type of radial gradient\n   * @default circle\n   * @type string\n   */\n  type?: Type;\n  /**\n   * The color to transition from\n   * @default #00000000\n   * @type string\n   * */\n  from?: string;\n\n  /**\n   * The color to transition to\n   * @default #290A5C\n   * @type string\n   * */\n  to?: string;\n\n  /**\n   * The size of the gradient in pixels\n   * @default 300\n   * @type number\n   * */\n  size?: number;\n\n  /**\n   * The origin of the gradient\n   * @default center\n   * @type string\n   * */\n  origin?: Origin;\n\n  /**\n   * The class name to apply to the gradient\n   * @default \"\"\n   * @type string\n   * */\n  className?: string;\n}\n\nconst RadialGradient = ({\n  type = \"circle\",\n  from = \"rgba(120,119,198,0.3)\",\n  to = \"hsla(0, 0%, 0%, 0)\",\n  size = 300,\n  origin = \"center\",\n  className,\n}: RadialProps) => {\n  const styles: CSSProperties = {\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    inset: 0,\n    backgroundImage: `radial-gradient(${type} ${size}px at ${origin}, ${from}, ${to})`,\n  };\n\n  return <div className={className} style={styles} />;\n};\n\nexport default RadialGradient;\n"
      }
    ],
    "name": "radial-gradient"
  },
  {
    "files": [
      {
        "name": "retro-grid.tsx",
        "dir": "components/magicui",
        "content": "import { cn } from \"@/lib/utils\";\n\nexport default function RetroGrid({ className }: { className?: string }) {\n  return (\n    <div\n      className={cn(\n        \"pointer-events-none absolute h-full w-full overflow-hidden opacity-50 [perspective:200px]\",\n        className,\n      )}\n    >\n      {/* Grid */}\n      <div className=\"absolute inset-0 [transform:rotateX(35deg)]\">\n        <div\n          className={cn(\n            \"animate-grid\",\n\n            \"[background-repeat:repeat] [background-size:60px_60px] [height:300vh] [inset:0%_0px] [margin-left:-50%] [transform-origin:100%_0_0] [width:600vw]\",\n\n            // Light Styles\n            \"[background-image:linear-gradient(to_right,rgba(0,0,0,0.3)_1px,transparent_0),linear-gradient(to_bottom,rgba(0,0,0,0.3)_1px,transparent_0)]\",\n\n            // Dark styles\n            \"dark:[background-image:linear-gradient(to_right,rgba(255,255,255,0.2)_1px,transparent_0),linear-gradient(to_bottom,rgba(255,255,255,0.2)_1px,transparent_0)]\",\n          )}\n        />\n      </div>\n\n      {/* Background Gradient */}\n      <div className=\"absolute inset-0 bg-gradient-to-t from-white to-transparent to-90% dark:from-black\" />\n    </div>\n  );\n}\n"
      }
    ],
    "name": "retro-grid"
  },
  {
    "files": [
      {
        "name": "ripple.tsx",
        "dir": "components/magicui",
        "content": "import React, { CSSProperties } from \"react\";\n\n// Modify these\nconst MAIN_CIRCLE_SIZE = 210;\nconst MAIN_CIRCLE_OPACITY = 0.24;\nconst NUM_CIRCLES = 8;\n\nconst Ripple = React.memo(() => {\n  return (\n    <div className=\"absolute left-1/2 top-1/2 h-full w-full overflow-visible\">\n      {Array.from({ length: NUM_CIRCLES }, (_, i) => (\n        <div\n          key={i}\n          className={`absolute -translate-x-1/2 -translate-y-1/2 animate-ripple rounded-full bg-neutral-400`}\n          style={\n            {\n              width: MAIN_CIRCLE_SIZE + i * 70,\n              height: MAIN_CIRCLE_SIZE + i * 70,\n              opacity: MAIN_CIRCLE_OPACITY - i * 0.03,\n              animationDelay: `${i * 0.06}s`,\n            } as CSSProperties\n          }\n        ></div>\n      ))}\n    </div>\n  );\n});\n\nexport default Ripple;\n"
      }
    ],
    "name": "ripple"
  },
  {
    "files": [
      {
        "name": "separate-away.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\n\ninterface SeparateAwayProps {\n  upper_text: string;\n  lower_text: string;\n  duration?: number;\n  hidden_opacity?: number;\n  visible_opacity?: number;\n  className?: string;\n}\n\nexport function SeparateAway({\n  upper_text,\n  lower_text,\n  duration = 1.5,\n  hidden_opacity = 0,\n  visible_opacity = 1,\n  className,\n}: SeparateAwayProps) {\n  const separate = {\n    hidden: { opacity: hidden_opacity, y: 0 },\n    visible: (custom: number) => ({\n      opacity: visible_opacity,\n      y: custom * 5,\n      transition: { duration: duration },\n    }),\n  };\n\n  return (\n    <div>\n      <motion.h1\n        custom={-1}\n        variants={separate}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className={cn(className)}\n      >\n        {upper_text}\n      </motion.h1>\n      <motion.h1\n        custom={1}\n        variants={separate}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className={cn(className)}\n      >\n        {lower_text}\n      </motion.h1>\n    </div>\n  );\n}\n"
      }
    ],
    "name": "separate-away"
  },
  {
    "files": [
      {
        "name": "shimmer-button.tsx",
        "dir": "components/magicui",
        "content": "import { cn } from \"@/lib/utils\";\nimport React, { CSSProperties } from \"react\";\n\nexport interface ShimmerButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  shimmerColor?: string;\n  shimmerSize?: string;\n  borderRadius?: string;\n  shimmerDuration?: string;\n  background?: string;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst ShimmerButton = React.forwardRef<HTMLButtonElement, ShimmerButtonProps>(\n  (\n    {\n      shimmerColor = \"#ffffff\",\n      shimmerSize = \"0.05em\",\n      shimmerDuration = \"3s\",\n      borderRadius = \"100px\",\n      background = \"rgba(0, 0, 0, 1)\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <button\n        style={\n          {\n            \"--spread\": \"90deg\",\n            \"--shimmer-color\": shimmerColor,\n            \"--radius\": borderRadius,\n            \"--speed\": shimmerDuration,\n            \"--cut\": shimmerSize,\n            \"--bg\": background,\n          } as CSSProperties\n        }\n        className={cn(\n          \"group relative z-0 flex cursor-pointer items-center justify-center overflow-hidden whitespace-nowrap border border-white/10 px-6 py-3 text-white [background:var(--bg)] [border-radius:var(--radius)] dark:text-black\",\n          \"transform-gpu transition-transform duration-300 ease-in-out active:translate-y-[1px]\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      >\n        {/* spark container */}\n        <div\n          className={cn(\n            \"-z-30 blur-[2px]\",\n            \"absolute inset-0 overflow-visible [container-type:size]\",\n          )}\n        >\n          {/* spark */}\n          <div className=\"absolute inset-0 h-[100cqh] animate-slide [aspect-ratio:1] [border-radius:0] [mask:none]\">\n            {/* spark before */}\n            <div className=\"animate-spin-around absolute inset-[-100%] w-auto rotate-0 [background:conic-gradient(from_calc(270deg-(var(--spread)*0.5)),transparent_0,var(--shimmer-color)_var(--spread),transparent_var(--spread))] [translate:0_0]\" />\n          </div>\n        </div>\n        {children}\n\n        {/* Highlight */}\n        <div\n          className={cn(\n            \"insert-0 absolute h-full w-full\",\n\n            \"rounded-2xl px-4 py-1.5 text-sm font-medium shadow-[inset_0_-8px_10px_#ffffff1f]\",\n\n            // transition\n            \"transform-gpu transition-all duration-300 ease-in-out\",\n\n            // on hover\n            \"group-hover:shadow-[inset_0_-6px_10px_#ffffff3f]\",\n\n            // on click\n            \"group-active:shadow-[inset_0_-10px_10px_#ffffff3f]\",\n          )}\n        />\n\n        {/* backdrop */}\n        <div\n          className={cn(\n            \"absolute -z-20 [background:var(--bg)] [border-radius:var(--radius)] [inset:var(--cut)]\",\n          )}\n        />\n      </button>\n    );\n  },\n);\n\nShimmerButton.displayName = \"ShimmerButton\";\n\nexport default ShimmerButton;\n"
      }
    ],
    "name": "shimmer-button"
  },
  {
    "files": [
      {
        "name": "text-reveal.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion, useScroll, useTransform } from \"framer-motion\";\nimport { FC, ReactNode, useRef } from \"react\";\n\ninterface TextRevealByWordProps {\n  text: string;\n  className?: string;\n}\n\nexport const TextRevealByWord: FC<TextRevealByWordProps> = ({\n  text,\n  className,\n}) => {\n  const targetRef = useRef<HTMLDivElement | null>(null);\n\n  const { scrollYProgress } = useScroll({\n    target: targetRef,\n  });\n  const words = text.split(\" \");\n\n  return (\n    <div ref={targetRef} className={cn(\"relative z-0 h-[200vh]\", className)}>\n      <div\n        className={\n          \"sticky top-0 mx-auto flex h-[50%] max-w-4xl items-center bg-transparent px-[1rem] py-[5rem]\"\n        }\n      >\n        <p\n          ref={targetRef}\n          className={\n            \"flex flex-wrap p-5 text-2xl font-bold text-black/20 dark:text-white/20 md:p-8 md:text-3xl lg:p-10 lg:text-4xl xl:text-5xl\"\n          }\n        >\n          {words.map((word, i) => {\n            const start = i / words.length;\n            const end = start + 1 / words.length;\n            return (\n              <Word key={i} progress={scrollYProgress} range={[start, end]}>\n                {word}\n              </Word>\n            );\n          })}\n        </p>\n      </div>\n    </div>\n  );\n};\n\ninterface WordProps {\n  children: ReactNode;\n  progress: any;\n  range: [number, number];\n}\n\nconst Word: FC<WordProps> = ({ children, progress, range }) => {\n  const opacity = useTransform(progress, range, [0, 1]);\n  return (\n    <span className=\"xl:lg-3 relative mx-1 lg:mx-2.5\">\n      <span className={\"absolute opacity-30\"}>{children}</span>\n      <motion.span\n        style={{ opacity: opacity }}\n        className={\"text-black dark:text-white\"}\n      >\n        {children}\n      </motion.span>\n    </span>\n  );\n};\n\nexport default TextRevealByWord;\n"
      }
    ],
    "name": "text-reveal"
  },
  {
    "files": [
      {
        "name": "tweet-card.tsx",
        "dir": "components/magicui",
        "content": "import { cn } from \"@/lib/utils\";\nimport { Suspense } from \"react\";\nimport {\n  enrichTweet,\n  type EnrichedTweet,\n  type TweetProps,\n  type TwitterComponents,\n} from \"react-tweet\";\nimport { getTweet, type Tweet } from \"react-tweet/api\";\n\ninterface TwitterIconProps {\n  className?: string;\n  [key: string]: any;\n}\nconst Twitter = ({ className, ...props }: TwitterIconProps) => (\n  <svg\n    stroke=\"currentColor\"\n    fill=\"currentColor\"\n    strokeWidth=\"0\"\n    viewBox=\"0 0 24 24\"\n    height=\"1em\"\n    width=\"1em\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className={className}\n    {...props}\n  >\n    <g>\n      <path fill=\"none\" d=\"M0 0h24v24H0z\"></path>\n      <path d=\"M22.162 5.656a8.384 8.384 0 0 1-2.402.658A4.196 4.196 0 0 0 21.6 4c-.82.488-1.719.83-2.656 1.015a4.182 4.182 0 0 0-7.126 3.814 11.874 11.874 0 0 1-8.62-4.37 4.168 4.168 0 0 0-.566 2.103c0 1.45.738 2.731 1.86 3.481a4.168 4.168 0 0 1-1.894-.523v.052a4.185 4.185 0 0 0 3.355 4.101 4.21 4.21 0 0 1-1.89.072A4.185 4.185 0 0 0 7.97 16.65a8.394 8.394 0 0 1-6.191 1.732 11.83 11.83 0 0 0 6.41 1.88c7.693 0 11.9-6.373 11.9-11.9 0-.18-.005-.362-.013-.54a8.496 8.496 0 0 0 2.087-2.165z\"></path>\n    </g>\n  </svg>\n);\n\nconst Verified = ({ className, ...props }: TwitterIconProps) => (\n  <svg\n    aria-label=\"Verified Account\"\n    viewBox=\"0 0 24 24\"\n    className={className}\n    {...props}\n  >\n    <g fill=\"currentColor\">\n      <path d=\"M22.5 12.5c0-1.58-.875-2.95-2.148-3.6.154-.435.238-.905.238-1.4 0-2.21-1.71-3.998-3.818-3.998-.47 0-.92.084-1.336.25C14.818 2.415 13.51 1.5 12 1.5s-2.816.917-3.437 2.25c-.415-.165-.866-.25-1.336-.25-2.11 0-3.818 1.79-3.818 4 0 .494.083.964.237 1.4-1.272.65-2.147 2.018-2.147 3.6 0 1.495.782 2.798 1.942 3.486-.02.17-.032.34-.032.514 0 2.21 1.708 4 3.818 4 .47 0 .92-.086 1.335-.25.62 1.334 1.926 2.25 3.437 2.25 1.512 0 2.818-.916 3.437-2.25.415.163.865.248 1.336.248 2.11 0 3.818-1.79 3.818-4 0-.174-.012-.344-.033-.513 1.158-.687 1.943-1.99 1.943-3.484zm-6.616-3.334l-4.334 6.5c-.145.217-.382.334-.625.334-.143 0-.288-.04-.416-.126l-.115-.094-2.415-2.415c-.293-.293-.293-.768 0-1.06s.768-.294 1.06 0l1.77 1.767 3.825-5.74c.23-.345.696-.436 1.04-.207.346.23.44.696.21 1.04z\" />\n    </g>\n  </svg>\n);\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nconst Skeleton = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  );\n};\n\nexport const TweetSkeleton = ({\n  className,\n  ...props\n}: {\n  className?: string;\n  [key: string]: any;\n}) => (\n  <div\n    className={cn(\n      \"flex h-full max-h-max w-full min-w-[18rem] flex-col gap-2 rounded-lg border p-4\",\n      className,\n    )}\n    {...props}\n  >\n    <div className=\"flex flex-row gap-2\">\n      <Skeleton className=\"h-10 w-10 shrink-0 rounded-full\" />\n      <Skeleton className=\"h-10 w-full\" />\n    </div>\n    <Skeleton className=\"h-20 w-full\" />\n  </div>\n);\n\nexport const TweetNotFound = ({\n  className,\n  ...props\n}: {\n  className?: string;\n  [key: string]: any;\n}) => (\n  <div\n    className={cn(\n      \"flex h-full w-full flex-col items-center justify-center gap-2 rounded-lg border p-4\",\n      className,\n    )}\n    {...props}\n  >\n    <h3>Tweet not found</h3>\n  </div>\n);\n\nexport const TweetHeader = ({ tweet }: { tweet: EnrichedTweet }) => (\n  <div className=\"flex flex-row justify-between tracking-tight\">\n    <div className=\"flex items-center space-x-2\">\n      <a href={tweet.user.url} target=\"_blank\" rel=\"noreferrer\">\n        <img\n          title={`Profile picture of ${tweet.user.name}`}\n          alt={tweet.user.screen_name}\n          height={48}\n          width={48}\n          src={tweet.user.profile_image_url_https}\n          className=\"overflow-hidden rounded-full border border-transparent\"\n        />\n      </a>\n      <div>\n        <a\n          href={tweet.user.url}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className=\"flex items-center whitespace-nowrap font-semibold\"\n        >\n          {truncate(tweet.user.name, 20)}\n          {tweet.user.verified ||\n            (tweet.user.is_blue_verified && (\n              <Verified className=\"ml-1 inline h-4 w-4 text-blue-500\" />\n            ))}\n        </a>\n        <div className=\"flex items-center space-x-1\">\n          <a\n            href={tweet.user.url}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className=\"text-sm text-gray-500 transition-all duration-75\"\n          >\n            @{truncate(tweet.user.screen_name, 16)}\n          </a>\n        </div>\n      </div>\n    </div>\n    <a href={tweet.url} target=\"_blank\" rel=\"noreferrer\">\n      <span className=\"sr-only\">Link to tweet</span>\n      <Twitter className=\"h-5 w-5 items-start text-[#3BA9EE] transition-all ease-in-out hover:scale-105\" />\n    </a>\n  </div>\n);\n\nexport const TweetBody = ({ tweet }: { tweet: EnrichedTweet }) => (\n  <div className=\"break-words leading-normal tracking-tighter\">\n    {tweet.entities.map((entity, idx) => {\n      switch (entity.type) {\n        case \"url\":\n        case \"symbol\":\n        case \"hashtag\":\n        case \"mention\":\n          return (\n            <a\n              key={idx}\n              href={entity.href}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-sm font-normal text-gray-500\"\n            >\n              <span>{entity.text}</span>\n            </a>\n          );\n        case \"text\":\n          return (\n            <span\n              key={idx}\n              className=\"text-sm font-normal\"\n              dangerouslySetInnerHTML={{ __html: entity.text }}\n            />\n          );\n      }\n    })}\n  </div>\n);\n\nexport const TweetMedia = ({ tweet }: { tweet: EnrichedTweet }) => (\n  <div className=\"flex flex-1 items-center justify-center\">\n    {tweet.video && (\n      <video\n        poster={tweet.video.poster}\n        autoPlay\n        loop\n        muted\n        playsInline\n        className=\"rounded-xl border shadow-sm\"\n      >\n        <source src={tweet.video.variants[0].src} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n    )}\n    {tweet.photos && (\n      <div className=\"relative flex transform-gpu snap-x snap-mandatory gap-4 overflow-x-auto\">\n        <div className=\"shrink-0 snap-center sm:w-2\" />\n        {tweet.photos.map((photo) => (\n          <img\n            key={photo.url}\n            src={photo.url}\n            title={\"Photo by \" + tweet.user.name}\n            alt={tweet.text}\n            className=\"h-64 w-5/6 shrink-0 snap-center snap-always rounded-xl border object-cover shadow-sm\"\n          />\n        ))}\n        <div className=\"shrink-0 snap-center sm:w-2\" />\n      </div>\n    )}\n    {!tweet.video &&\n      !tweet.photos &&\n      // @ts-ignore\n      tweet?.card?.binding_values?.thumbnail_image_large?.image_value.url && (\n        <img\n          // @ts-ignore\n          src={tweet.card.binding_values.thumbnail_image_large.image_value.url}\n          className=\"h-64 rounded-xl border object-cover shadow-sm\"\n        />\n      )}\n  </div>\n);\n\nexport const MagicTweet = ({\n  tweet,\n  components,\n  className,\n  ...props\n}: {\n  tweet: Tweet;\n  components?: TwitterComponents;\n  className?: string;\n}) => {\n  const enrichedTweet = enrichTweet(tweet);\n  return (\n    <div\n      className={cn(\n        \"relative flex h-full w-full max-w-[32rem] flex-col gap-2 overflow-hidden rounded-lg border p-4 backdrop-blur-md\",\n        className,\n      )}\n      {...props}\n    >\n      <TweetHeader tweet={enrichedTweet} />\n      <TweetBody tweet={enrichedTweet} />\n      <TweetMedia tweet={enrichedTweet} />\n    </div>\n  );\n};\n\n/**\n * TweetCard (Server Side Only)\n */\nexport const TweetCard = async ({\n  id,\n  components,\n  fallback = <TweetSkeleton />,\n  onError,\n  ...props\n}: TweetProps & {\n  className?: string;\n}) => {\n  const tweet = id\n    ? await getTweet(id).catch((err) => {\n        if (onError) {\n          onError(err);\n        } else {\n          console.error(err);\n        }\n      })\n    : undefined;\n\n  if (!tweet) {\n    const NotFound = components?.TweetNotFound || TweetNotFound;\n    return <NotFound {...props} />;\n  }\n\n  return (\n    <Suspense fallback={fallback}>\n      <MagicTweet tweet={tweet} {...props} />\n    </Suspense>\n  );\n};\n\nexport default TweetCard;\n"
      }
    ],
    "name": "tweet-card"
  },
  {
    "files": [
      {
        "name": "typing-animation.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { useEffect, useState } from \"react\";\n\ninterface TypingAnimationProps {\n  text: string;\n  duration?: number;\n  className?: string;\n}\n\nexport default function TypingAnimation({\n  text,\n  duration = 200,\n  className,\n}: TypingAnimationProps) {\n  const [displayedText, setDisplayedText] = useState<string>(\"\");\n  const [i, setI] = useState<number>(0);\n\n  useEffect(() => {\n    const typingEffect = setInterval(() => {\n      if (i < text.length) {\n        setDisplayedText((prevState) => prevState + text.charAt(i));\n        setI(i + 1);\n      } else {\n        clearInterval(typingEffect);\n      }\n    }, duration);\n\n    return () => {\n      clearInterval(typingEffect);\n    };\n  }, [duration, i]);\n\n  return (\n    <h1\n      className={cn(\n        'text-center font-display text-4xl font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]',\n        className,\n      )}\n    >\n      {displayedText ? displayedText : text}\n    </h1>\n  );\n}\n"
      }
    ],
    "name": "typing-animation"
  },
  {
    "files": [
      {
        "name": "wavy-text.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { useMemo } from \"react\";\n\ninterface WavyTextProps {\n  word: string;\n  className?: string;\n  variant?: {\n    hidden: { y: number };\n    visible: { y: number };\n  };\n  duration?: number;\n  delay?: number;\n}\nconst WavyText = ({\n  word,\n  className,\n  variant,\n  duration = 0.5,\n  delay = 0.05,\n}: WavyTextProps) => {\n  const defaultVariants = {\n    hidden: { y: 10 },\n    visible: { y: -10 },\n  };\n  const combinedVariants = variant || defaultVariants;\n  const characters = useMemo(() => word.split(\"\"), [word]);\n  return (\n    <div className=\"overflow-hidden p-2\">\n      <div className=\"flex justify-center space-x-2\">\n        <AnimatePresence>\n          {characters.map((char, i) => (\n            <motion.h1\n              key={i}\n              initial=\"hidden\"\n              animate=\"visible\"\n              exit=\"hidden\"\n              variants={combinedVariants}\n              transition={{\n                yoyo: Infinity,\n                duration: duration,\n                delay: i * delay,\n              }}\n              className={cn(\n                className,\n                \"font-display text-center text-4xl font-bold tracking-[-0.1em] md:text-7xl\",\n              )}\n            >\n              {char}\n            </motion.h1>\n          ))}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};\n\nexport default WavyText;\n"
      }
    ],
    "name": "wavy-text"
  },
  {
    "files": [
      {
        "name": "word-pull-up.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { motion, Variants } from \"framer-motion\";\nimport { cn } from \"lib/utils\";\n\ninterface WordPullUpProps {\n  words: string;\n  duration?: number;\n  delayMultiple?: number;\n  wrapperFramerProps?: Variants;\n  framerProps?: Variants;\n  className?: string;\n}\n\nexport default function WordPullUp({\n  words,\n  wrapperFramerProps = {\n    hidden: { opacity: 0 },\n    show: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2,\n      },\n    },\n  },\n  framerProps = {\n    hidden: { y: 20, opacity: 0 },\n    show: { y: 0, opacity: 1 },\n  },\n  className,\n}: WordPullUpProps) {\n  return (\n    <motion.h1\n      variants={wrapperFramerProps}\n      initial=\"hidden\"\n      animate=\"show\"\n      className={cn(\n        \"font-display text-center text-4xl font-bold tracking-[-0.02em] drop-shadow-sm md:text-7xl md:leading-[5rem]\",\n        className,\n      )}\n    >\n      {words.split(\" \").map((word, i) => (\n        <motion.span\n          key={i}\n          variants={framerProps}\n          style={{ display: \"inline-block\", paddingRight: \"15px\" }}\n        >\n          {word === \"\" ? <span>&nbsp;</span> : word}\n        </motion.span>\n      ))}\n    </motion.h1>\n  );\n}\n"
      }
    ],
    "name": "word-pull-up"
  },
  {
    "files": [
      {
        "name": "word-rotate.tsx",
        "dir": "components/magicui",
        "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\";\nimport { useEffect, useState } from \"react\";\n\ninterface WordRotateProps {\n  words: string[];\n  duration?: number;\n  framerProps?: HTMLMotionProps<\"h1\">;\n  className?: string;\n}\n\nexport default function WordRotate({\n  words,\n  duration = 2500,\n  framerProps = {\n    initial: { opacity: 0, y: -50 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: 50 },\n    transition: { duration: 0.25, ease: \"easeOut\" },\n  },\n  className,\n}: WordRotateProps) {\n  const [index, setIndex] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setIndex((prevIndex) => (prevIndex + 1) % words.length);\n    }, duration);\n\n    // Clean up interval on unmount\n    return () => clearInterval(interval);\n  }, [words, duration]);\n\n  return (\n    <div className=\"overflow-hidden py-2\">\n      <AnimatePresence mode=\"wait\">\n        <motion.h1\n          key={words[index]}\n          className={cn(className)}\n          {...framerProps}\n        >\n          {words[index]}\n        </motion.h1>\n      </AnimatePresence>\n    </div>\n  );\n}\n"
      }
    ],
    "name": "word-rotate"
  }
]